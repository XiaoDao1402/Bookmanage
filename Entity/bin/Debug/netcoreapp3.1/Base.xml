<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JW.Base</name>
    </assembly>
    <members>
        <member name="T:JW.Base.Base.ConvertHelper">
            <summary>
            数据转换辅助类
            </summary>
        </member>
        <member name="F:JW.Base.Base.ConvertHelper.DEFAULT_DATE">
            <summary>
            默认日期
            </summary>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.ToInt(System.Object)">
            <summary>
            转换成整形
            </summary>
            <param name="obj">转换的变量</param>
            <returns>转换结果：如果为空或者非数字字符串的话，则返回0</returns>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.ToActionString(System.Object)">
            <summary>
            转换成字符串
            </summary>
            <param name="obj">转换的变量</param>
            <returns>转换结果：如果转换的数据为空，则返回sting.Empty</returns>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.ToDouble(System.Object)">
            <summary>
            转换成双浮点
            </summary>
            <param name="obj">转换的变量</param>
            <returns>转换结果：如果转换的数据为空，则返回0.0000</returns>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.ToDateTime(System.Object,System.String)">
            <summary>
            将对象转换为数值(DateTime)类型,转换失败返回1900-01-01
            </summary>
            <param name="obj">转换的对象</param>
            <param name="format">日期格式</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.ToDateTime(System.Object)">
            <summary>
            转成日期格式
            </summary>
            <param name="obj">日期字符串</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.ToFloat(System.Object)">
            <summary>
            转成单浮点数
            </summary>
            <param name="obj">转换的变量</param>
            <returns>转换结果：如果转换的数据为空，则返回0.0f</returns>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.ToDecimal(System.Object)">
            <summary>
            转成小数
            </summary>
            <param name="obj">转换的变量</param>
            <returns>转换结果：如果转换的数据为空，则返回0</returns>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.ToLong(System.Object)">
            <summary>
            转成整型long
            </summary>
            <param name="obj">转换的变量</param>
            <returns>转换结果；如果转换的数据为空，则返回0</returns>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.PadLeftSide(System.Object,System.Int32,System.Char)">
            <summary>
            往左边补足位数
            </summary>
            <param name="obj">补足的变量</param>
            <param name="totalLenght">总共长度</param>
            <param name="padSymbol">补充的符号</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.PadRightSide(System.Object,System.Int32,System.Char)">
            <summary>
            往右边补足位数
            </summary>
            <param name="obj">补足的变量</param>
            <param name="totalLenght">总共长度</param>
            <param name="padSymbol">补充的符号</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.IsDateTime(System.Object)">
            <summary>
            判断对象是否为正确的日期值
            </summary>
            <param name="obj">目标数据</param>
            <returns>Boolean。</returns>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.GetImageFormat(System.IO.Stream)">
            <summary>
            获取Image图片格式
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.ImageToBytes(System.Drawing.Image)">
            <summary>
            Convert Image to Byte[]
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.GetReducedImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary> 
            生成缩略图重载方法1，返回缩略图的Image对象 
            </summary>
            <param name="image"></param> 
            <param name="Width">缩略图的宽度</param> 
            <param name="Height">缩略图的高度</param> 
            <returns>缩略图的Image对象</returns> 
        </member>
        <member name="M:JW.Base.Base.ConvertHelper.DistanceOfTwoPoints(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算坐标距离
            </summary>
            <param name="lng1"></param>
            <param name="lat1"></param>
            <param name="lng2"></param>
            <param name="lat2"></param>
            <returns></returns>
        </member>
        <member name="T:JW.Base.Configuration.ConfigurationManager">
            <summary>
            配置管理器
            </summary>
        </member>
        <member name="F:JW.Base.Configuration.ConfigurationManager.Lazy">
            <summary>
            懒加载器
            </summary>
        </member>
        <member name="P:JW.Base.Configuration.ConfigurationManager.Current">
            <summary>
            当前管理器
            </summary>
        </member>
        <member name="F:JW.Base.Configuration.ConfigurationManager.Configuration">
            <summary>
            配置
            </summary>
        </member>
        <member name="T:JW.Base.File.Canvas">
            <summary>
            画布
            </summary>
        </member>
        <member name="P:JW.Base.File.Canvas.Images">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.File.Canvas.Texts">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.File.Canvas.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:JW.Base.File.Canvas.Combin">
            <summary>
            合并
            </summary>
            <returns></returns>
        </member>
        <member name="T:JW.Base.File.Excel">
            <summary>
            辅助类：Excel文件
            </summary>
        </member>
        <member name="M:JW.Base.File.Excel.ExportExcelByList``1(System.Collections.Generic.List{``0},System.String,System.String[],System.Action{``0,NPOI.SS.UserModel.IRow})">
            <summary>
            实体列表导出EXCEL
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">列表</param>
            <param name="sheetName">Sheet名</param>
            <param name="tableTitle">表头名称</param>
            <param name="action">数据动作</param>
            <returns></returns>
        </member>
        <member name="T:JW.Base.File.Item.BaseItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.File.Item.BaseItem.X">
            <summary>
            X坐标
            </summary>
        </member>
        <member name="P:JW.Base.File.Item.BaseItem.Y">
            <summary>
            Y坐标
            </summary>
        </member>
        <member name="P:JW.Base.File.Item.BaseItem.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:JW.Base.File.Item.BaseItem.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="P:JW.Base.File.Item.BaseItem.ZIndex">
            <summary>
            层级，越大越高
            </summary>
        </member>
        <member name="T:JW.Base.File.Item.ImageItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.File.Item.ImageItem.FillRadius">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.File.Item.ImageItem.Image">
            <summary>
            
            </summary>
        </member>
        <member name="T:JW.Base.File.Item.TextItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.File.Item.TextItem.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.File.Item.TextItem.FontSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.File.Item.TextItem.Font">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.File.Item.TextItem.IsBold">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.File.Item.TextItem.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.File.Item.TextItem.TextAlign">
            <summary>
            
            </summary>
        </member>
        <member name="T:JW.Base.File.Item.TextAlign">
            <summary>
            
            </summary>
        </member>
        <member name="F:JW.Base.File.Item.TextAlign.Right">
            <summary>
            
            </summary>
        </member>
        <member name="F:JW.Base.File.Item.TextAlign.Left">
            <summary>
            
            </summary>
        </member>
        <member name="T:JW.Base.File.Util.ImageUtility">
            <summary>
            辅助类：图片
            </summary>
        </member>
        <member name="M:JW.Base.File.Util.ImageUtility.FromUrl(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.File.Util.ImageUtility.CreateFontImage(System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            生成文字图片（ClearType）
            </summary>
            <param name="text">文本</param>
            <param name="font">字体</param>
            <param name="rect">返回图片大小</param>
            <param name="fontColor">字体颜色</param>
            <param name="backColor">背景色</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.File.Util.ImageUtility.CombinImage(System.Drawing.Image,System.Drawing.Image,System.Int32,System.Int32)">
            <summary> 
            合并图片 
            </summary> 
            <param name="imgBack"></param> 
            <param name="img"></param> 
            <param name="xDeviation"></param>
            <param name="yDeviation"></param>
            <returns></returns> 
        </member>
        <member name="M:JW.Base.File.Util.ImageUtility.WayTwo(System.Drawing.Bitmap)">
            <summary>
            图片转成圆角方法二
            </summary>
        </member>
        <member name="M:JW.Base.File.Util.ImageUtility.Circular(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.File.Util.ImageUtility.ResizeImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            从大图中截取一部分图片
            </summary>
            <param name="fromImage">来源图片</param>       
            <param name="offsetX">从偏移X坐标位置开始截取</param>
            <param name="offsetY">从偏移Y坐标位置开始截取</param>
            <param name="width">保存图片的宽度</param>
            <param name="height">保存图片的高度</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.File.Util.ImageUtility.ResizeImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32)">
            <summary>  
            Resize图片  
            </summary>  
            <param name="bmp">原始Bitmap</param>  
            <param name="newW">新的宽度</param>  
            <param name="newH">新的高度</param>  
            <param name="mode">保留着，暂时未用</param>  
            <returns>处理以后的图片</returns>  
        </member>
        <member name="M:JW.Base.File.Util.ImageUtility.SizeImageWithOldPercent(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            按照指定大小缩放图片，但是为了保证图片宽高比自动截取
            </summary>
            <param name="srcPath">原图片路径</param>
            <param name="destWidth">目标图片宽</param>
            <param name="destHeight">目标图片高</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.File.Util.ImageUtility.CutImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            剪裁 -- 用GDI+
            </summary>
            <param name="image">原始图片</param>
            <param name="StartX">开始坐标X</param>
            <param name="StartY">开始坐标Y</param>
            <param name="destWidth">目标图片宽度</param>
            <param name="destHeight">目标图片高度高度</param>
            <returns>剪裁后的Bitmap</returns>
        </member>
        <member name="M:JW.Base.File.Util.ImageUtility.GetThumbnail(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <param name="destHeight"></param>
            <param name="destWidth"></param>
            <returns></returns>
        </member>
        <member name="T:JW.Base.File.Xml">
            <summary>
            
            </summary>
        </member>
        <member name="M:JW.Base.File.Xml.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JW.Base.File.Xml.SerializeObject``1(``0)">
            <summary>
                XML序列化
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.File.Xml.SerializeObjectWithoutNamespace``1(``0)">
            <summary>
                序列化XML不带命名空间和定义
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.File.Xml.DeserializeObject``1(System.IO.Stream)">
            <summary>
                反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.File.Xml.DeserializeObject``1(System.String)">
            <summary>
                反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:JW.Base.Http.BaseBll.HttpHelperBll">
            <summary>
            具体实现方法  Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="F:JW.Base.Http.BaseBll.HttpHelperBll.httpbase">
            <summary>
            Httphelper原始访问类对象
            </summary>
        </member>
        <member name="M:JW.Base.Http.BaseBll.HttpHelperBll.GetHtml(JW.Base.Http.HttpItem)">
            <summary>
            根据相传入的数据，得到相应页面数据
            </summary>
            <param name="item">参数类对象</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:JW.Base.Http.BaseBll.HttpHelperBll.FastRequest(JW.Base.Http.HttpItem)">
            <summary>
            快速Post数据这个访求与GetHtml一样，只是不接收返回数据，只做提交。
            </summary>
            <param name="item">参数类对象</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="T:JW.Base.Http.Base.HttphelperBase">
            <summary>
            Http连接操作帮助类  Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.GetHtml(JW.Base.Http.HttpItem)">
            <summary>
            根据相传入的数据，得到相应页面数据
            </summary>
            <param name="item">参数类对象</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.FastRequest(JW.Base.Http.HttpItem)">
            <summary>
            快速Post数据这个访求与GetHtml一样，只是不接收返回数据，只做提交。
            </summary>
            <param name="item">参数类对象</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.GetData(JW.Base.Http.HttpItem,JW.Base.Http.HttpResult)">
            <summary>
            获取数据的并解析的方法
            </summary>
            <param name="item">参数类对象</param>
            <param name="result"></param>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.SetResultByte(JW.Base.Http.HttpItem,JW.Base.Http.HttpResult,System.Byte[])">
            <summary>
            设置返回的Byte
            </summary>
            <param name="item">参数类对象</param>
            <param name="result">result</param>
            <param name="enByte">byte</param>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.SetEncoding(JW.Base.Http.HttpItem,JW.Base.Http.HttpResult,System.Byte[])">
            <summary>
            设置编码
            </summary>
            <param name="item">参数类对象</param>
            <param name="result">HttpResult</param>
            <param name="ResponseByte">byte[]</param>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.GetByte(JW.Base.Http.HttpItem)">
            <summary>
            提取网页Byte
            </summary>
            <param name="item">参数类对象</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.SetRequest(JW.Base.Http.HttpItem)">
             <summary>
             为请求准备参数
             </summary>
            <param name="item">参数类对象</param>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.SetCer(JW.Base.Http.HttpItem)">
            <summary>
            设置证书
            </summary>
            <param name="item">参数类对象</param>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.SetCerList(JW.Base.Http.HttpItem)">
            <summary>
            设置多个证书
            </summary>
            <param name="item">参数类对象</param>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.SetCookie(JW.Base.Http.HttpItem)">
            <summary>
            设置Cookie
            </summary>
            <param name="item">参数类对象</param>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.SetPostData(JW.Base.Http.HttpItem)">
            <summary>
            设置Post数据
            </summary>
            <param name="item">参数类对象</param>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.SetProxy(JW.Base.Http.HttpItem)">
            <summary>
            设置代理
            </summary>
            <param name="item">参数类对象</param>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            回调验证证书问题
            </summary>
            <param name="sender">流对象</param>
            <param name="certificate">证书</param>
            <param name="chain">X509Chain</param>
            <param name="errors">SslPolicyErrors</param>
            <returns>bool</returns>
        </member>
        <member name="M:JW.Base.Http.Base.HttphelperBase.BindIPEndPointCallback(System.Net.ServicePoint,System.Net.IPEndPoint,System.Int32)">
            <summary>
            通过设置这个属性，可以在发出连接的时候绑定客户端发出连接所使用的IP地址。 
            </summary>
            <param name="servicePoint"></param>
            <param name="remoteEndPoint"></param>
            <param name="retryCount"></param>
            <returns></returns>
        </member>
        <member name="T:JW.Base.Http.Enum.AType">
            <summary>
            A链接的类型  Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="F:JW.Base.Http.Enum.AType.Text">
            <summary>
            文本链接(默认)
            </summary>
        </member>
        <member name="F:JW.Base.Http.Enum.AType.Img">
            <summary>
            图片链接
            </summary>
        </member>
        <member name="T:JW.Base.Http.Enum.PostDataType">
            <summary>
            Post的数据格式默认为string  Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="F:JW.Base.Http.Enum.PostDataType.String">
            <summary>
            字符串类型，这时编码Encoding可不设置
            </summary>
        </member>
        <member name="F:JW.Base.Http.Enum.PostDataType.Byte">
            <summary>
            Byte类型，需要设置PostdataByte参数的值编码Encoding可设置为空
            </summary>
        </member>
        <member name="F:JW.Base.Http.Enum.PostDataType.FilePath">
            <summary>
            传文件，Postdata必须设置为文件的绝对路径，必须设置Encoding的值
            </summary>
        </member>
        <member name="T:JW.Base.Http.Enum.ResultCookieType">
            <summary>
            Cookie返回类型  Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="F:JW.Base.Http.Enum.ResultCookieType.String">
            <summary>
            只返回字符串类型的Cookie
            </summary>
        </member>
        <member name="F:JW.Base.Http.Enum.ResultCookieType.CookieCollection">
            <summary>
            CookieCollection格式的Cookie集合同时也返回String类型的cookie
            </summary>
        </member>
        <member name="F:JW.Base.Http.Enum.ResultCookieType.CookieContainer">
            <summary>
            CookieContainer 多纬度Cookie
            </summary>
        </member>
        <member name="T:JW.Base.Http.Enum.ResultType">
            <summary>
            返回类型  Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="F:JW.Base.Http.Enum.ResultType.String">
            <summary>
            表示只返回字符串 只有Html有数据,ResultByte为空
            </summary>
        </member>
        <member name="F:JW.Base.Http.Enum.ResultType.Byte">
            <summary>
            表示只返回字符串 只有ResultByte有数据,Html为空
            </summary>
        </member>
        <member name="F:JW.Base.Http.Enum.ResultType.StringByte">
            <summary>
            表示返回字符串和字节流 ResultByte和Html都有数据返回
            </summary>
        </member>
        <member name="T:JW.Base.Http.Enum.WebRequestDataTypes">
            <summary>
                请求数据的类型
            </summary>
        </member>
        <member name="F:JW.Base.Http.Enum.WebRequestDataTypes.JSON">
            <summary>
            
            </summary>
        </member>
        <member name="F:JW.Base.Http.Enum.WebRequestDataTypes.XML">
            <summary>
            
            </summary>
        </member>
        <member name="T:JW.Base.Http.Helper.ExecJsHelper">
            <summary>
            用户执行JS的方法  Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="M:JW.Base.Http.Helper.ExecJsHelper.JavaScriptEval(System.String,System.String)">
            <summary>
            直接调用JS方法并获取返回的值
            </summary>
            <param name="strJs">要执行的JS代码</param>
            <param name="main">要调用的方法名</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:JW.Base.Http.Helper.ExecJsHelper.SetScriptControlType(System.String,System.Object)">
            <summary>
            获取ScriptControl接口类
            </summary>
            <param name="strJs">JS</param>
            <param name="obj">对象</param>
            <returns>Type</returns>
        </member>
        <member name="M:JW.Base.Http.Helper.ExecJsHelper.GetScriptControl">
            <summary>
            获取ScriptControl接口对象
            </summary>
            <returns>ScriptControl对象</returns>
        </member>
        <member name="T:JW.Base.Http.Helper.HtmlHelper">
            <summary>
            Html操作相关  Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="M:JW.Base.Http.Helper.HtmlHelper.GetAList(System.String)">
            <summary>
            获取所有的A链接
            </summary>
            <param name="html">要分析的Html代码</param>
            <returns>返回一个List存储所有的A标签</returns>
        </member>
        <member name="M:JW.Base.Http.Helper.HtmlHelper.GetImgList(System.String)">
            <summary>
            获取所有的Img标签
            </summary>
            <param name="html">要分析的Html代码</param>
            <returns>返回一个List存储所有的Img标签</returns>
        </member>
        <member name="M:JW.Base.Http.Helper.HtmlHelper.StripHTML(System.String)">
            <summary>
            过滤html标签
            </summary>
            <param name="html">html的内容</param>
            <returns>处理后的文本</returns>
        </member>
        <member name="M:JW.Base.Http.Helper.HtmlHelper.ReplaceNewLine(System.String)">
            <summary>
            过滤html中所有的换行符号
            </summary>
            <param name="html">html的内容</param>
            <returns>处理后的文本</returns>
        </member>
        <member name="M:JW.Base.Http.Helper.HtmlHelper.GetBetweenHtml(System.String,System.String,System.String)">
            <summary>
            提取Html字符串中两字符之间的数据
            </summary>
            <param name="html">源Html</param>
            <param name="s">开始字符串</param>
            <param name="e">结束字符串</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Helper.HtmlHelper.GetHtmlTitle(System.String)">
            <summary>
            提取网页Title
            </summary>
            <param name="html">Html</param>
            <returns>返回Title</returns>
        </member>
        <member name="T:JW.Base.Http.Helper.HttpCookieHelper">
            <summary>
            Cookie操作帮助类 Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="M:JW.Base.Http.Helper.HttpCookieHelper.GetSmallCookie(System.String)">
            <summary>
            根据字符生成Cookie和精简串，将排除path,expires,domain以及重复项
            </summary>
            <param name="strcookie">Cookie字符串</param>
            <returns>精简串</returns>
        </member>
        <member name="M:JW.Base.Http.Helper.HttpCookieHelper.StrCookieToCookieCollection(System.String)">
            <summary>
            将字符串Cookie转为CookieCollection
            </summary>
            <param name="strcookie">Cookie字符串</param>
            <returns>List-CookieItem</returns>
        </member>
        <member name="M:JW.Base.Http.Helper.HttpCookieHelper.CookieCollectionToStrCookie(System.Net.CookieCollection)">
            <summary>
            将CookieCollection转为字符串Cookie
            </summary>
            <param name="cookie">Cookie字符串</param>
            <returns>strcookie</returns>
        </member>
        <member name="M:JW.Base.Http.Helper.HttpCookieHelper.GetMergeCookie(System.String,System.String)">
            <summary>
            自动合并两个Cookie的值返回更新后结果 
            </summary>
            <param name="cookie1">Cookie1</param>
            <param name="cookie2">Cookie2</param>
            <returns>返回更新后的Cookie</returns>
        </member>
        <member name="T:JW.Base.Http.Helper.HttpUrlHelper">
            <summary>
            和Url相关的帮助方法  Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="M:JW.Base.Http.Helper.HttpUrlHelper.URLDecode(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码对象将 URL 编码的字符串转换为已解码的字符串。
            </summary>
            <param name="text">指定的字符串</param>
            <param name="encoding">指定编码默认为Default</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Helper.HttpUrlHelper.URLEncode(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码对象对 URL 字符串进行编码。
            </summary>
            <param name="text">指定的字符串</param>
            <param name="encoding">指定编码默认为Default</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Helper.HttpUrlHelper.GetNameValueCollection(System.String)">
            <summary>
            将Url参数字符串转为一个Key和Value的集合
            </summary>
            <param name="str">要转为集合的字符串</param>
            <returns>NameValueCollection</returns>
        </member>
        <member name="M:JW.Base.Http.Helper.HttpUrlHelper.GetUrlHost(System.String)">
            <summary>
            提取网站主机部分就是host
            </summary>
            <param name="url">url</param>
            <returns>host</returns>
        </member>
        <member name="M:JW.Base.Http.Helper.HttpUrlHelper.GetUrlIp(System.String)">
            <summary>
            提取网址对应的IP地址
            </summary>
            <param name="url">url</param>
            <returns>返回Url对应的IP地址</returns>
        </member>
        <member name="T:JW.Base.Http.Helper.UrlHelper">
            <summary>
            URL工具类
            </summary>
        </member>
        <member name="M:JW.Base.Http.Helper.UrlHelper.IsValidUrl(System.String)">
            <summary>
            是否合法URL
            </summary>
            <param name="_url">待判断的url</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Helper.UrlHelper.IsNormalUrl(System.String)">
            <summary>
            是否一般URL(不包含？等后缀参数)
            </summary>
            <param name="_url">待判断的url</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Helper.UrlHelper.IsValidDir(System.String)">
            <summary>
            是否合法URL目录
            </summary>
            <param name="_dir">待判断的url目录</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Helper.UrlHelper.GetNormalUrl(System.String)">
            <summary>
            从原始URL转换为一般URL(根据需要截断)
            </summary>
            <param name="_url">待转换的url</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Helper.UrlHelper.UrlSplit(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            URL分析，拆分出Host,Path,File,Query各个部分
            </summary>
            <param name="url">原始URL</param>
            <param name="host">host部分</param>
            <param name="path">path部分</param>
            <param name="file">文件名</param>
            <param name="query">参数</param>
        </member>
        <member name="T:JW.Base.Http.ResultHandler">
            <summary>
            gethtml方法异步调用的委托
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:JW.Base.Http.HttpHelper">
            <summary>
            HTTP工具类
            </summary>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.PostAsync(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            POST请求
            </summary>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.PostAsync(System.String,System.String)">
            <summary>
            POST请求（返回字符串）
            </summary>
            <param name="url"></param>
            <param name="postdata"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.PostAsync(System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            POST请求（返回字符串）
            </summary>
            <param name="url"></param>
            <param name="postdata"></param>
            <param name="cer"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.PostAsync``1(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            POST请求（返回具体类型）
            </summary>
            <typeparam name="T">返回数据对象</typeparam>
            <param name="url">请求地址</param>
            <param name="content">请求内容</param>
            <param name="headers">请求头部</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.PostAsync``1(System.String,``0,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            POST请求（返回字符串）
            </summary>
            <typeparam name="T">数据对象</typeparam>
            <param name="url">请求地址</param>
            <param name="data">数据</param>
            <param name="headers">请求头部</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.PostAsync``2(System.String,``0,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            POST请求（返回具体类型）
            </summary>
            <typeparam name="T">数据对象</typeparam>
            <typeparam name="V">返回对象</typeparam>
            <param name="url">请求地址</param>
            <param name="data">请求数据</param>
            <param name="headers">请求头部</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.PostAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            POST请求（支持IFormFile数据）
            </summary>
            <param name="url">请求地址</param>
            <param name="data">请求数据</param>
            <param name="headers">请求头部</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.PostAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            POST请求（支持IFormFile数据，返回具体类型）
            </summary>
            <param name="url">请求地址</param>
            <param name="data">请求数据</param>
            <param name="headers">请求头部</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.PostAsync``1(System.String,System.Object,System.Func{System.String,System.String},JW.Base.Http.Enum.WebRequestDataTypes,JW.Base.Http.Enum.WebRequestDataTypes,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            POST请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="obj"></param>
            <param name="serializeStrFunc"></param>
            <param name="inputDataType"></param>
            <param name="outDataType"></param>
            <param name="cer"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetAsync(System.String)">
            <summary>
            GET请求
            </summary>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetAsync``1(System.String)">
            <summary>
            GET请求
            </summary>
            <typeparam name="T">返回对象</typeparam>
            <param name="url">请求地址</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            GET 请求
            </summary>
            <param name="url">请求URL</param>
            <param name="param">请求参数</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            GET请求
            </summary>
            <typeparam name="T">返回对象</typeparam>
            <param name="url">请求地址</param>
            <param name="param">请求参数</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetHtml(JW.Base.Http.HttpItem)">
            <summary>
            根据相传入的数据，得到相应页面数据
            </summary>
            <param name="item">参数类对象</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.FastRequest(JW.Base.Http.HttpItem)">
            <summary>
            快速请求方法FastRequest（极速请求不接收数据,只做提交）不返回Header、Cookie、Html
            </summary>
            <param name="item">参数类对象</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetSmallCookie(System.String)">
            <summary>
            根据字符生成Cookie和精简串，将排除path,expires,domain以及重复项
            </summary>
            <param name="strcookie">Cookie字符串</param>
            <returns>精简串</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.StrCookieToCookieCollection(System.String)">
            <summary>
            将字符串Cookie转为CookieCollection
            </summary>
            <param name="strcookie">Cookie字符串</param>
            <returns>List-CookieItem</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.CookieCollectionToStrCookie(System.Net.CookieCollection)">
            <summary>
            将CookieCollection转为字符串Cookie
            </summary>
            <param name="cookie">Cookie字符串</param>
            <returns>strcookie</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetMergeCookie(System.String,System.String)">
            <summary>
            自动合并两个Cookie的值返回更新后结果 
            </summary>
            <param name="cookie1">Cookie1</param>
            <param name="cookie2">Cookie2</param>
            <returns>返回更新后的Cookie</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.URLDecode(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码对象将 URL 编码的字符串转换为已解码的字符串。
            </summary>
            <param name="text">指定的字符串</param>
            <param name="encoding">指定编码默认为Default</param>
            <returns>解码后字符串</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.URLEncode(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码对象对 URL 字符串进行编码。
            </summary>
            <param name="text">指定的字符串</param>
            <param name="encoding">指定编码默认为Default</param>
            <returns>转码后字符串</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetNameValueCollection(System.String)">
            <summary>
            将Url参数字符串转为一个Key和Value的集合
            </summary>
            <param name="str">要转为集合的字符串</param>
            <returns>NameValueCollection</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetUrlHost(System.String)">
            <summary>
            提取网站主机部分就是host
            </summary>
            <param name="url">url</param>
            <returns>host</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetUrlIp(System.String)">
            <summary>
            提取网址对应的IP地址
            </summary>
            <param name="url">url</param>
            <returns>返回Url对应的IP地址</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetAList(System.String)">
            <summary>
            获取所有的A链接
            </summary>
            <param name="html">要分析的Html代码</param>
            <returns>返回一个List存储所有的A标签</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetImgList(System.String)">
            <summary>
            获取所有的Img标签
            </summary>
            <param name="html">要分析的Html代码</param>
            <returns>返回一个List存储所有的Img标签</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.StripHTML(System.String)">
            <summary>
            过滤html标签
            </summary>
            <param name="html">html的内容</param>
            <returns>处理后的文本</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.ReplaceNewLine(System.String)">
            <summary>
            过滤html中所有的换行符号
            </summary>
            <param name="html">html的内容</param>
            <returns>处理后的文本</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetBetweenHtml(System.String,System.String,System.String)">
            <summary>
            提取Html字符串中两字符之间的数据
            </summary>
            <param name="html">源Html</param>
            <param name="s">开始字符串</param>
            <param name="e">结束字符串</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.GetHtmlTitle(System.String)">
            <summary>
            提取网页Title
            </summary>
            <param name="html">Html</param>
            <returns>返回Title</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.JavaScriptEval(System.String,System.String)">
            <summary>
            直接调用JS方法并获取返回的值
            </summary>
            <param name="strJs">要执行的JS代码</param>
            <param name="main">要调用的方法名</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.ByteToString(System.Byte[],System.Text.Encoding)">
            <summary>
            将字节数组转为字符串
            </summary>
            <param name="b">字节数组</param>
            <param name="e">编码，默认为Default</param>
            <returns>字符串</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.StringToByte(System.String,System.Text.Encoding)">
            <summary>
            将字符串转为字节数组
            </summary>
            <param name="s">字符串</param>
            <param name="e">编码，默认为Default</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.Base64ToString(System.String,System.Text.Encoding)">
            <summary>
            将Base64编码解析成字符串
            </summary>
            <param name="strbase">要解码的string字符</param>
            <param name="encoding">字符编码方案</param>
            <returns>字符串</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.ByteToBase64(System.Byte[])">
            <summary>
            将字节数组为Base64编码
            </summary>
            <param name="bytebase">要编码的byte[]</param>
            <returns>base字符串</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.StringToBase64(System.String,System.Text.Encoding)">
            <summary>
            将字符串转为Base64编码
            </summary>
            <param name="str">要编码的string字符</param>
            <param name="encoding">字符编码方案</param>
            <returns>base字符串</returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.InitGetParamters(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            初始化GET请求参数
            </summary>
            <param name="url">请求地址</param>
            <param name="param">请求参数</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.HttpHelper.InitPostParamters(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            初始化POST请求参数
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="F:JW.Base.Http.HttpHelper.bll">
            <summary>
            HttpHelperBLL
            </summary>
        </member>
        <member name="T:JW.Base.Http.HttpHelper.GethtmlHandler">
            <summary>
            gethtml方法异步调用的委托
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:JW.Base.Http.HttpItem">
            <summary>
            Http请求参考类  Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.URL">
            <summary>
            请求URL必须填写
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.Method">
            <summary>
            请求方式默认为GET方式,当为POST方式时必须设置Postdata的值
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.Timeout">
            <summary>
            默认请求超时时间
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.ReadWriteTimeout">
            <summary>
            默认写入和读取Post数据超时间
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.Host">
            <summary>
            设置Host的标头信息
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.KeepAlive">
            <summary>
             获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接默认为true。
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.Accept">
            <summary>
            请求标头值 默认为text/html, application/xhtml+xml, */*
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.ContentType">
            <summary>
            请求返回类型默认 text/html
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.UserAgent">
            <summary>
            客户端访问信息默认Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.Referer">
            <summary>
            来源地址，上次访问地址
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.ProtocolVersion">
            <summary>
              获取或设置用于请求的 HTTP 版本。返回结果:用于请求的 HTTP 版本。默认为 System.Net.HttpVersion.Version11。
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.Expect100Continue">
            <summary>
             获取或设置一个 System.Boolean 值，该值确定是否使用 100-Continue 行为。如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.MaximumAutomaticRedirections">
            <summary>
            设置请求将跟随的重定向的最大数目
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.IfModifiedSince">
            <summary>
            获取和设置IfModifiedSince，默认为当前日期和时间
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.IsGzip">
            <summary>
             是否执行Gzip解压 默认为否
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.Encoding">
            <summary>
            返回数据编码默认为NUll,可以自动识别,一般为utf-8,gbk,gb2312
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.PostEncoding">
            <summary>
            设置或获取Post参数编码,默认的为Default编码
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.AutomaticDecompression">
            <summary>
            设置所使用的解压缩类型
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.PostDataType">
            <summary>
            Post的数据类型
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.Postdata">
            <summary>
            Post请求时要发送的字符串Post数据
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.PostdataByte">
            <summary>
            Post请求时要发送的Byte类型的Post数据
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.Cookie">
            <summary>
            请求时的Cookie
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.AutoRedirectCookie">
            <summary>
            请求时当设置allowautoredirect=true时是否自动处理Cookie
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.ResultCookieType">
            <summary>
            设置返回/输入Cookie类型,默认的是只返回/输入字符串类型Cookie
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.IsUpdateCookie">
            <summary>
            是否自动将Cookie自动更新为请求所获取的新Cookie值  默认为False
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.CookieContainer">
            <summary>
            Cookie对象的集合容器 模式Cookie，可容纳N个CookieCollection对象
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.CerPath">
            <summary>
            证书绝对路径
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.CerPwd">
            <summary>
            证书密码
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.ClentCertificates">
            <summary>
            设置509证书集合
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.ICredentials">
            <summary>
            获取或设置请求的身份验证信息。
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.IsToLower">
            <summary>
            是否设置为全文小写，默认为不转化
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.Allowautoredirect">
            <summary>
            支持跳转页面，查询结果将是跳转后的页面，默认是不跳转
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.Connectionlimit">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.WebProxy">
            <summary>
            设置代理对象，不想使用IE默认配置就设置为Null，而且不要设置ProxyIp
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.ProxyUserName">
            <summary>
            代理Proxy 服务器用户名
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.ProxyPwd">
            <summary>
            代理 服务器密码
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.ProxyIp">
            <summary>
            代理 服务IP,如果要使用IE代理就设置为ieproxy
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.ResultType">
            <summary>
            设置返回类型String和Byte
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.Header">
            <summary>
            header对象
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.IPEndPoint">
             <summary>
             设置本地的出口ip和端口
             </summary>]
             <example>
            item.IPEndPoint = new IPEndPoint(IPAddress.Parse("192.168.1.1"),80);
             </example>
        </member>
        <member name="P:JW.Base.Http.HttpItem.SecurityProtocol">
            <summary>
            当出现“请求被中止: 未能创建 SSL/TLS 安全通道”时需要配置此属性 
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpItem.IsReset">
            <summary>
            是否重置request,response的值，默认不重置，当设置为True时request,response将被设置为Null
            </summary>
        </member>
        <member name="T:JW.Base.Http.HttpResult">
            <summary>
            Http返回参数类  Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpResult.Cookie">
            <summary>
            Http请求返回的Cookie
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpResult.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpResult.Html">
            <summary>
            返回的String类型数据 只有ResultType.String时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpResult.ResultByte">
            <summary>
            返回的Byte数组 只有ResultType.Byte时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpResult.Header">
            <summary>
            header对象
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpResult.StatusDescription">
            <summary>
            返回状态说明
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpResult.StatusCode">
            <summary>
            返回状态码,默认为OK
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpResult.ResponseUri">
            <summary>
            最后访问的URl
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpResult.RedirectUrl">
            <summary>
            获取重定向的URl
            </summary>
        </member>
        <member name="P:JW.Base.Http.HttpResult.item">
            <summary>
            HttpItem类，用于存储实际执行所用到的HttpItem对象
            </summary>
        </member>
        <member name="T:JW.Base.Http.Item.AItem">
            <summary>
            A连接对象  Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="P:JW.Base.Http.Item.AItem.Href">
            <summary>
            链接地址
            </summary>
        </member>
        <member name="P:JW.Base.Http.Item.AItem.Text">
            <summary>
            链接文本
            </summary>
        </member>
        <member name="P:JW.Base.Http.Item.AItem.Img">
            <summary>
            链接的图片，如果是文本链接则为空
            </summary>
        </member>
        <member name="P:JW.Base.Http.Item.AItem.Html">
            <summary>
            整个连接Html
            </summary>
        </member>
        <member name="P:JW.Base.Http.Item.AItem.Type">
            <summary>
            A链接的类型
            </summary>
        </member>
        <member name="T:JW.Base.Http.Item.ImgItem">
            <summary>
            图片对象  Copyright：http://www.httphelper.com/
            </summary>
        </member>
        <member name="P:JW.Base.Http.Item.ImgItem.Src">
            <summary>
            图片网址
            </summary>
        </member>
        <member name="P:JW.Base.Http.Item.ImgItem.Html">
            <summary>
            图片标签Html
            </summary>
        </member>
        <member name="T:JW.Base.Http.Model.ApiModel`1">
            <summary>
            Api结果
            </summary>
            <typeparam name="TValue">数据模型</typeparam>
        </member>
        <member name="P:JW.Base.Http.Model.ApiModel`1.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.ApiModel`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel`1.#ctor(`0)">
            <summary>
            Api返回的数据模型（成功）
            </summary>
            <param name="val">值</param>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel`1.#ctor(`0,JW.Base.Http.Model.ApiResult)">
            <summary>
            Api返回的数据模型
            </summary>
            <param name="val">值</param>
            <param name="result">结果</param>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel`1.#ctor(System.Exception,System.Boolean)">
            <summary>
            Api返回的数据模型（异常）
            </summary>
            <param name="e">异常</param>
            <param name="includeExceptions">返回是否包含异常</param>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel`1.AsError(System.String,System.String)">
            <summary>
            Api返回的数据模型（异常）
            </summary>
            <param name="errorField"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel`1.AsError(System.String,System.Int32)">
            <summary>
            Api返回的数据模型（异常）
            </summary>
            <param name="errorMessage"></param>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel`1.AsError(System.String,`0)">
            <summary>
            Api返回的数据模型（异常）
            </summary>
            <param name="errorMessage"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel`1.AsSuccess(`0,System.String)">
            <summary>
            Api返回的数据模型（成功）
            </summary>
            <param name="val"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel`1.FromException(System.Exception,System.Boolean)">
            <summary>
            Api返回的数据模型（异常）
            </summary>
            <param name="exception"></param>
            <param name="includeExceptions"></param>
            <returns></returns>
        </member>
        <member name="T:JW.Base.Http.Model.ApiModel">
            <summary>
            扩展：Api结果
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.ApiModel.IsIncludeException">
            <summary>
            全局控制，是否包括异常
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.ApiModel.IsLogException">
            <summary>
            全局控制，是否打印异常
            </summary>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel.ActionResult(Microsoft.AspNetCore.Mvc.IActionResult)">
            <summary>
            结果
            </summary>
            <param name="actionResult"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel.AsSuccess``1(``0,System.String)">
            <summary>
            成功结果
            </summary>
            <typeparam name="TValue">值类型</typeparam>
            <param name="val">值</param>
            <param name="message">信息</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel.AsSuccessResult``1(``0,System.String)">
            <summary>
            成功结果
            </summary>
            <typeparam name="TValue">值类型</typeparam>
            <param name="val">值</param>
            <param name="message">信息</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel.AsError``1(``0,System.String)">
            <summary>
            异常结果
            </summary>
            <typeparam name="TValue">值类型</typeparam>
            <param name="val">值</param>
            <param name="message">信息</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel.AsErrorResult``1(``0,System.String)">
            <summary>
            错误结果
            </summary>
            <typeparam name="TValue">值类型</typeparam>
            <param name="val">值</param>
            <param name="message">信息</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel.AsErrorResult``1(``0,System.String,System.Int32)">
            <summary>
            错误结果
            </summary>
            <typeparam name="TValue">值类型</typeparam>
            <param name="val">值</param>
            <param name="message">信息</param>
            <param name="errorCode">错误码</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel.FromException``1(``0,System.Exception,System.Boolean)">
            <summary>
            异常结果
            </summary>
            <typeparam name="TValue">值类型</typeparam>
            <param name="val">值</param>
            <param name="e">异常</param>
            <param name="includeExceptions">包含异常信息</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel.FromException``1(System.Exception,System.Boolean)">
            <summary>
            异常结果
            </summary>
            <typeparam name="TValue">值类型</typeparam>
            <param name="e">异常</param>
            <param name="includeExceptions">包含异常信息</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiModel.AsExceptionResult(System.Exception,System.Boolean)">
            <summary>
            异常结果
            </summary>
            <param name="e">异常</param>
            <param name="includeExceptions">包含异常信息</param>
            <returns></returns>
        </member>
        <member name="T:JW.Base.Http.Model.ApiResult">
            <summary>
            Api结果
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.ApiResult.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.ApiResult.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.ApiResult.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.ApiResult.Errors">
            <summary>
            Dictionary key is the field having the error
            Value is a list of errors. We don't support errors caused by a combination of fields like the Nancy ModelResult
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.ApiResult.Code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="M:JW.Base.Http.Model.ApiResult.#ctor(System.String,System.String)">
            <summary>
            Api结果
            </summary>
            <param name="errorField">错误字段</param>
            <param name="errorMessage">错误消息</param>
        </member>
        <member name="M:JW.Base.Http.Model.ApiResult.#ctor(System.Int32,System.String)">
            <summary>
            Api结果
            </summary>
            <param name="errorCode">错误码</param>
            <param name="errorMessage">错误消息</param>
        </member>
        <member name="M:JW.Base.Http.Model.ApiResult.#ctor">
            <summary>
            Api结果
            </summary>
        </member>
        <member name="M:JW.Base.Http.Model.ApiResult.#ctor(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Api结果
            </summary>
            <param name="errors">错误</param>
        </member>
        <member name="M:JW.Base.Http.Model.ApiResult.AsError(System.String,System.String)">
            <summary>
            扩展：错误
            </summary>
            <param name="errorField"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiResult.AsError(System.String,System.Int32)">
            <summary>
            扩展：错误
            </summary>
            <param name="errorMessage"></param>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Http.Model.ApiResult.AsSuccess(System.String)">
            <summary>
            扩展：成功
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="F:JW.Base.Http.Model.ApiResult.SuccessResult">
            <summary>
            成功结果
            </summary>
        </member>
        <member name="M:JW.Base.Http.Model.ApiResult.FromException(System.Exception,System.Boolean)">
            <summary>
            扩展：异常结果
            </summary>
            <param name="exception"></param>
            <param name="includeExceptions"></param>
            <returns></returns>
        </member>
        <member name="T:JW.Base.Http.Model.PageModel`1">
            <summary>
            分页数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:JW.Base.Http.Model.PageModel`1.PageCount">
            <summary>
            页数
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.PageModel`1.Total">
            <summary>
            总数
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.PageModel`1.PageNumber">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.PageModel`1.PageSize">
            <summary>
            页条数
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.PageModel`1.HasPreviousPage">
            <summary>
            是否上一页
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.PageModel`1.HasNextPage">
            <summary>
            是否下一页
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.PageModel`1.IsFirstPage">
            <summary>
            是否首页
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.PageModel`1.IsLastPage">
            <summary>
            是否末页
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.PageModel`1.FirstItemOnPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.PageModel`1.LastItemOnPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.Http.Model.PageModel`1.Data">
            <summary>
            
            </summary>
        </member>
        <member name="M:JW.Base.Http.Model.PageModel`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="list"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="total"></param>
        </member>
        <member name="T:JW.Base.Http.Static.ContentType">
            <summary>
            HTTP 内容类型(Content-Type)
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.ContentType.TEXT_PLAIN">
            <summary>
            资源类型：普通文本
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.ContentType.APPLICATION_JSON">
            <summary>
            资源类型：JSON字符串
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.ContentType.APPLICATION_OCTET_STREAM">
            <summary>
            资源类型：未知类型(数据流)
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.ContentType.WWW_FORM_URLENC">
            <summary>
            资源类型：表单数据(键值对)
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.ContentType.MULTIPART_FORM_DATA">
            <summary>
            资源类型：多分部数据
            </summary>
        </member>
        <member name="T:JW.Base.Http.Static.RegexString">
            <summary>
            正则表达式静态类
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.RegexString.Alist">
            <summary>
            获取所有的A链接
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.RegexString.ImgList">
            <summary>
            获取所有的Img标签
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.RegexString.Nscript">
            <summary>
            所有的Nscript
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.RegexString.Style">
            <summary>
            所有的Style
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.RegexString.Script">
            <summary>
            所有的Script
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.RegexString.Html">
            <summary>
            所有的Html
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.RegexString.NewLine">
            <summary>
            换行符号
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.RegexString.Enconding">
             <summary>
            获取网页编码
             </summary>
        </member>
        <member name="F:JW.Base.Http.Static.RegexString.AllHtml">
            <summary>
            所有Html
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.RegexString.HtmlTitle">
            <summary>
            title
            </summary>
        </member>
        <member name="T:JW.Base.Http.Static.UserAgent">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="F:JW.Base.Http.Static.UserAgent.Chrome">
            <summary>
            谷歌浏览器
            </summary>
        </member>
        <member name="T:JW.Base.Lang.Attributes.NameAttribute">
            <summary>
            名称特性
            </summary>
        </member>
        <member name="M:JW.Base.Lang.Attributes.NameAttribute.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:JW.Base.Lang.Attributes.NameAttribute.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:JW.Base.Lang.Attributes.NameAttribute.#ctor(System.Type,System.String)">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="T:JW.Base.Lang.Date.Month">
            <summary>
            月份
            </summary>
        </member>
        <member name="P:JW.Base.Lang.Date.Month.EN">
            <summary>
            英文
            </summary>
        </member>
        <member name="P:JW.Base.Lang.Date.Month.CN">
            <summary>
            中文
            </summary>
        </member>
        <member name="T:JW.Base.Lang.Date.Week">
            <summary>
            星期
            </summary>
        </member>
        <member name="P:JW.Base.Lang.Date.Week.EN">
            <summary>
            英文
            </summary>
        </member>
        <member name="P:JW.Base.Lang.Date.Week.CN">
            <summary>
            中文
            </summary>
        </member>
        <member name="T:JW.Base.Lang.DisplayTextAttribute">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:JW.Base.Lang.DisplayTextAttribute.Text">
            <summary>
            
            </summary>
        </member>
        <member name="M:JW.Base.Lang.DisplayTextAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:JW.Base.Lang.Encrypt.DataEncrypt">
            <summary>
            数据加密
            </summary>
        </member>
        <member name="M:JW.Base.Lang.Encrypt.DataEncrypt.Encode(System.String)">
            <summary>
            加密（默认UTF8编码方式）
            </summary>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.Encrypt.DataEncrypt.Encode(System.Byte[])">
            <summary>
            将字节数组为Base64编码
            </summary>
            <param name="bytebase">要编码的byte[]</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.Encrypt.DataEncrypt.Encode(System.String,System.Text.Encoding)">
            <summary>
            加密
            </summary>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.Encrypt.DataEncrypt.Decode(System.String)">
            <summary>
            解密（默认UTF8编码方式）
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.Encrypt.DataEncrypt.Decode(System.String,System.Text.Encoding)">
            <summary>
            解密
            </summary>
            <param name="source"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.Encrypt.DataEncrypt.DataMd5(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="encypStr">需加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.Encrypt.DataEncrypt.DataMd5Hash(System.String)">
            <summary>
            MD5 Hash 加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.Encrypt.DataEncrypt.GetMD5HashByByte(System.Byte[])">
            <summary>
            获取文件MD5值
            </summary>
            <param name="data"></param>
            <returns>MD5值</returns>
        </member>
        <member name="F:JW.Base.Lang.Encrypt.DataEncrypt._arrDESKey">
            <summary>
            用于对称算法的密钥
            </summary>
        </member>
        <member name="F:JW.Base.Lang.Encrypt.DataEncrypt._arrDESIV">
            <summary>
            用于对称算法的初始化向量
            </summary>
        </member>
        <member name="M:JW.Base.Lang.Encrypt.DataEncrypt.Encode(System.String,System.Byte[],System.Byte[])">
            <summary>
            对数据进行编码
            </summary>
            <param name="encodeStr">需要加密的字符串</param>
            <param name="arrDESKey">用于对称算法的密钥</param>
            <param name="arrDESIV">用于对称算法的初始化向量</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.Encrypt.DataEncrypt.Decode(System.String,System.Byte[],System.Byte[])">
            <summary>
            对数据解码
            </summary>
            <param name="decodeStr">需要解码的字符串</param>
            <param name="arrDESKey">用于对称算法的密钥</param>
            <param name="arrDESIV">用于对称算法的初始化向量</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.Encrypt.DataEncrypt.ByteToString(System.Byte[],System.Text.Encoding)">
            <summary>
            将字节数组转为字符串
            </summary>
            <param name="b">字节数组</param>
            <param name="e">编码，默认为Default</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.Encrypt.DataEncrypt.StringToByte(System.String,System.Text.Encoding)">
            <summary>
            将字符串转为字节数组
            </summary>
            <param name="s">字符串</param>
            <param name="e">编码，默认为Default</param>
            <returns></returns>
        </member>
        <member name="T:JW.Base.Lang.ExcuteCodeHelper">
            <summary>   
            本类用来将字符串转为可执行文本并执行   
            </summary>   
        </member>
        <member name="F:JW.Base.Lang.ExcuteCodeHelper.staticMethodName">
            <summary>   
            静态方法的执行字符串名称   
            </summary>   
        </member>
        <member name="F:JW.Base.Lang.ExcuteCodeHelper._Compiled">
            <summary>   
            用于动态引用生成的类，执行其内部包含的可执行字符串   
            </summary>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.EvaluateInt(System.String)">
            <summary>   
            执行字符串并返回整型值   
            </summary>   
            <param name="name">执行字符串名称</param>   
            <returns>执行结果</returns>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.EvaluateDouble(System.String)">
            <summary>   
            执行字符串并返回双精度值   
            </summary>   
            <param name="name">执行字符串名称</param>   
            <returns>执行结果</returns>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.EvaluateLong(System.String)">
            <summary>   
            执行字符串并返回长整型数值   
            </summary>   
            <param name="name">执行字符串名称</param>   
            <returns>执行结果</returns>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.EvaluateDecimal(System.String)">
            <summary>   
            执行字符串并返回十进制数值   
            </summary>   
            <param name="name">执行字符串名称</param>   
            <returns>执行结果</returns>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.EvaluateString(System.String)">
            <summary>   
            执行字符串并返回字符串型值   
            </summary>   
            <param name="name">执行字符串名称</param>   
            <returns>执行结果</returns>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.EvaluateBool(System.String)">
            <summary>   
            执行字符串并返回布尔型值   
            </summary>   
            <param name="name">执行字符串名称</param>   
            <returns>执行结果</returns>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.Evaluate(System.String)">
            <summary>   
            执行字符串并返 object 型值   
            </summary>   
            <param name="name">执行字符串名称</param>   
            <returns>执行结果</returns>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.#ctor(JW.Base.Lang.ExcuteCode[])">
            <summary>   
            可执行串的构造函数   
            </summary>   
            <param name="items">   
            可执行字符串数组   
            </param>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.#ctor(System.Type,System.String,System.String)">
            <summary>   
            可执行串的构造函数   
            </summary>   
            <param name="returnType">返回值类型</param>   
            <param name="expression">执行表达式</param>   
            <param name="name">执行字符串名称</param>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.#ctor(JW.Base.Lang.ExcuteCode)">
            <summary>   
            可执行串的构造函数   
            </summary>   
            <param name="item">可执行字符串项</param>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.ConstructEvaluator(JW.Base.Lang.ExcuteCode[])">
            <summary>   
            解析字符串构造函数   
            </summary>   
            <param name="items">待解析字符串数组</param>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.EvaluateToInteger(System.String)">
            <summary>   
            执行表达式并返回整型值   
            </summary>   
            <param name="code">要执行的表达式</param>   
            <returns>运算结果</returns>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.EvaluateToDouble(System.String)">
            <summary>   
            执行表达式并返回双精度值   
            </summary>   
            <param name="code">执行字符串名称</param>   
            <returns>执行结果</returns>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.EvaluateToLong(System.String)">
            <summary>   
            执行表达式并返回长整型数值   
            </summary>   
            <param name="code">执行字符串名称</param>   
            <returns>执行结果</returns>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.EvaluateToDecimal(System.String)">
            <summary>   
            执行表达式并返回十进制数值   
            </summary>   
            <param name="code">执行字符串名称</param>   
            <returns>执行结果</returns>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.EvaluateToString(System.String)">
            <summary>   
            执行表达式并返回字符串型值   
            </summary>   
            <param name="code">要执行的表达式</param>   
            <returns>运算结果</returns>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.EvaluateToBool(System.String)">
            <summary>   
            执行表达式并返回布尔型值   
            </summary>   
            <param name="code">要执行的表达式</param>   
            <returns>运算结果</returns>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCodeHelper.EvaluateToObject(System.String)">
            <summary>   
            执行表达式并返回 object 型值   
            </summary>   
            <param name="code">要执行的表达式</param>   
            <returns>运算结果</returns>   
        </member>
        <member name="T:JW.Base.Lang.ExcuteCode">
            <summary>   
            可执行字符串项（即一条可执行字符串）   
            </summary>   
        </member>
        <member name="F:JW.Base.Lang.ExcuteCode.ReturnType">
            <summary>   
            返回值类型   
            </summary>   
        </member>
        <member name="F:JW.Base.Lang.ExcuteCode.Expression">
            <summary>   
            执行表达式   
            </summary>   
        </member>
        <member name="F:JW.Base.Lang.ExcuteCode.Name">
            <summary>   
            执行字符串名称   
            </summary>   
        </member>
        <member name="M:JW.Base.Lang.ExcuteCode.#ctor(System.Type,System.String,System.String)">
            <summary>   
            可执行字符串项构造函数   
            </summary>   
            <param name="returnType">返回值类型</param>   
            <param name="expression">执行表达式</param>   
            <param name="name">执行字符串名称</param>   
        </member>
        <member name="T:JW.Base.Lang.ObjectHelper">
            <summary>
            对象工具类
            </summary>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.ObjectToString(System.Object)">
            <summary>
            对象转换为字符串
            </summary>
            <param name="obj">对象</param>
            <returns>字符串</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.ObjectToString(System.Object,System.String,System.String[])">
            <summary>
            将对象转化为字符串
            </summary>
            <param name="obj">对象</param>
            <param name="objString"></param>
            <param name="properties">要显示的属性</param>
            <returns>对象字符串</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.ToDateTime(System.String,System.String)">
            <summary>
            字符串转日期时间,空字符串返回默认时间
            </summary>
            <param name="str"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.IsDateEqual(System.DateTime,System.DateTime)">
            <summary>
            是否日期相同
            </summary>
            <param name="time1"></param>
            <param name="time2"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.IsDateGreaterOrEqual(System.DateTime,System.DateTime)">
            <summary>
            是否日期1大于等于日期2
            </summary>
            <param name="time1">日期1</param>
            <param name="time2">日期2</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CalcDays(System.DateTime,System.DateTime)">
            <summary>
            计算日期间天数
            </summary>
            <param name="time1"></param>
            <param name="time2"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CalcMilliseconds(System.DateTime,System.DateTime)">
            <summary>
            计算时间差（毫秒）
            </summary>
            <param name="time1"></param>
            <param name="time2"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CreateCurrentDateAtTime(System.String)">
            <summary>
            获取当前日期某个时间
            </summary>
            <param name="time">时间（"6:00:00"）</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.GetWeek(System.DateTime)">
            <summary>
            获取星期几
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.GetMonth(System.DateTime)">
            <summary>
            获取月份
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.ToDisplayText(System.Enum)">
            <summary>
            
            </summary>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.IfNull``1(``0,``0)">
            <summary>
            如果为空则返回另外一个对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="testObject">测试对象</param>
            <param name="anotherObject">另外一个对象</param>
            <returns>如果为空则返回另外一个对象</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.IsNull(System.Object)">
            <summary>
            对象是否为空
            </summary>
            <param name="testObject">测试对象</param>
            <returns>如果对象为DBNull或为null则返回true；否则返回false</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.IsNullOrEmpty(System.Object)">
            <summary>
            对象是否为空
            </summary>
            <param name="testObject">测试对象</param>
            <returns>如果对象为DBNull或为null或者为空字符串或者为空数组，则返回true；否则返回false</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.IsNotNullOrEmpty(System.Object)">
            <summary>
            对象是否不为空
            </summary>
            <param name="testObject">测试对象</param>
            <returns>如果对象为DBNull或为null或者为空字符串或者为空数组，则返回false；否则返回true</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CheckTrue(System.Boolean,System.String)">
            <summary>
            检查布尔变量是否为True
            </summary>
            <param name="boolValue">布尔变量</param>
            <param name="message">如果不为True，抛出的异常信息</param>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CheckFalse(System.Boolean,System.String)">
            <summary>
            检查布尔变量是否为False
            </summary>
            <param name="boolValue">布尔变量</param>
            <param name="message">如果不为False，抛出的异常信息</param>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CheckNullOrEmpty(System.Object)">
            <summary>
            判断对象是否为空
            </summary>
            <param name="testObject">测试对象</param>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CheckNullOrEmpty(System.Object,System.String)">
            <summary>
            判断对象是否为空
            </summary>
            <param name="testObject">测试对象</param>
            <param name="message">如果对象为空，抛出的异常信息</param>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CheckNull(System.Object)">
            <summary>
            判断对象是否为空
            </summary>
            <param name="testObject">测试对象</param>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CheckNull(System.Object,System.String)">
            <summary>
            判断对象是否为空
            </summary>
            <param name="testObject">测试对象</param>
            <param name="message">如果对象为空，抛出的异常信息</param>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CheckNotNullOrEmpty(System.Object)">
            <summary>
            判断对象是否为空
            </summary>
            <param name="testObject">测试对象</param>
            <returns>如果对象为DBNull或者为null则返回true,否则返回false</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CheckNotNullOrEmpty(System.Object,System.String)">
            <summary>
            判断对象是否为空
            </summary>
            <param name="testObject">测试对象</param>
            <returns>如果对象为DBNull或者为null则返回true,否则返回false</returns>
            <param name="message">如果对象不为空，抛出的异常信息</param>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CheckNotNull(System.Object)">
            <summary>
            判断对象是否为空
            </summary>
            <param name="testObject">测试对象</param>
            <returns>如果对象为DBNull或者为null则返回true,否则返回false</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CheckNotNull(System.Object,System.String)">
            <summary>
            判断对象是否为空
            </summary>
            <param name="testObject">测试对象</param>
            <returns>如果对象为DBNull或者为null则返回true,否则返回false</returns>
            <param name="message">如果对象不为空，抛出的异常信息</param>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.CheckMaxSize(System.String,System.Int32)">
            <summary>
            检查文本大小不超过最大字节
            </summary>
            <param name="content">待检测文本</param>
            <param name="maxSize">最大字节</param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.IsEqual``1(``0,``0)">
            <summary>
            判断对象是否相等
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="src">源对象</param>
            <param name="dest">目标对象</param>
            <returns>如果对象相等，返回True，否则返回False</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.ObjectCast``1(System.Object,``0,System.String)">
            <summary>
            类型转换
            </summary>
            <typeparam name="T">对象类型能够</typeparam>
            <param name="sourceObject">待转换的对象</param>
            <param name="nullValue">如果对象为空，返回的值</param>
            <param name="castErrorMessage">转换异常信息</param>
            <returns>类型转换后的对象</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.ObjectCast``1(System.Object,``0)">
            <summary>
            类型转换
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sourceObject">待转换的对象</param>
            <param name="nullValue">如果对象为空，返回的值</param>
            <returns>类型转换后的对象</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.ObjectCast``1(System.Object)">
            <summary>
            类型转换
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="sourceObject">待转换的对象</param>
            <returns>类型转换后的对象</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.AddDetail``1(``0,System.String,System.Object)">
            <summary>
            添加数据细节
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exception"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.Append``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            添加元素到字典
            </summary>
            <param name="dict">字典</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>字典</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.Append``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            添加元素到字典
            </summary>
            <param name="dict">字典</param>
            <param name="elements">元素</param>
            <returns>字典</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.Append``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            添加元素到列表
            </summary>
            <param name="list">列表</param>
            <param name="elements">元素</param>
            <returns>列表</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.Change``1(System.Collections.Generic.List{``0},``0,``0)">
            <summary>
            修改列表元素
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="list">列表</param>
            <param name="source">修改源</param>
            <param name="change">修改值</param>
            <returns>列表</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.Append``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加元素到列表
            </summary>
            <param name="list">列表</param>
            <param name="elements">元素</param>
            <returns>列表</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            获取属性值，如果能找到相应属性，返回属性值，否则返回null
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性</param>
            <returns>属性值</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.SetPropertyValue``1(``0,System.String,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名称</param>
            <param name="propertyValue">属性值</param>
            <returns>返回obj</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.GetSubArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            截取数组中指定长度数据
            </summary>
            <param name="src">目标数组</param>
            <param name="startIndex">数组下标</param>
            <param name="length">截取长度</param>
            <returns>截取后数据</returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.Xor(System.Byte,System.Byte)">
            <summary>
            异或运算
            </summary>
            <param name="byte1"></param>
            <param name="byte2"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            键值对解构
            </summary>
            <typeparam name="K">键类型</typeparam>
            <typeparam name="V">值类型</typeparam>
            <param name="keyValue">键值对</param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:JW.Base.Lang.ObjectHelper.FromHtml(System.Drawing.Color,System.String)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="htmlColor"></param>
            <returns></returns>
        </member>
        <member name="T:JW.Base.Lang.ReflectionHelpler">
            <summary>
            反射工具类
            </summary>
        </member>
        <member name="F:JW.Base.Lang.ReflectionHelpler.BasicType">
            <summary>
            
            </summary>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetType(System.String)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetOriginalTypeByRef(System.Type)">
            <summary>
            获取ref类型的原始类型
            </summary>
            <param name="refType">ref类型</param>
            <returns>如果是Ref类型，则原始类型；否则返回输入的类型。如输入String类型，则返回String类型</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.CreateInstance(System.Type,System.Object[])">
            <summary>
            创建对象
            </summary>
            <param name="componentType">组件类型</param>
            <param name="parameters">构造方法参数</param>
            <returns>对象</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetFullGenericTypeNameString(System.String,System.String[])">
            <summary>
            获取类型的全限定名称
            </summary>
            <param name="typeName">类型名称</param>
            <param name="childTypeQualifiedNames">子类型全限定名称</param>
            <returns>全限定名称</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetGenericType(System.String,System.String,System.String[])">
            <summary>
            获取泛型类型
            </summary>
            <param name="assemblyName">程序集名称</param>
            <param name="typeName">类名</param>
            <param name="childTypeQualifiedNames">泛型名称</param>
            <returns>泛型类型</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetGenericType(System.Reflection.Assembly,System.String,System.String[])">
            <summary>
            获取泛型类型
            </summary>
            <param name="assembly">程序集</param>
            <param name="typeName">类名</param>
            <param name="childTypeQualifiedNames">泛型名称</param>
            <returns>泛型类型</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.IsNumberType(System.Type)">
            <summary>
            判断类型是否数字
            </summary>
            <param name="type">类型</param>
            <returns>是否是数字类型</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.IsIntegerType(System.Type)">
            <summary>
            判断类型是否整数
            </summary>
            <param name="type">类型</param>
            <returns>是否是整数类型</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.IsDictionary(System.Type)">
            <summary>
            是否为字典类型
            </summary>
            <param name="type">类型</param>
            <returns>是否字典类型</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.IsEnumerable(System.Type)">
            <summary>
            是否可以枚举
            </summary>
            <param name="type">类型</param>
            <returns>是否枚举类型</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.IsCollection(System.Type)">
            <summary>
            是否是集合类型
            </summary>
            <param name="type">类型</param>
            <returns>是否是集合类型</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetElementType(System.Type)">
            <summary>
            获取元素类型
            </summary>
            <param name="collectionType">集合类型</param>
            <returns>集合中元素类型</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetDisplayName(System.Type)">
            <summary>
            获取显示名称
            </summary>
            <param name="type">类型</param>
            <returns>显示名称</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetDescription(System.Type)">
            <summary>
            获取描述
            </summary>
            <param name="type">类型</param>
            <returns>描述</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.IsType(System.Type,System.Type)">
            <summary>
            是否是指定類別
            </summary>
            <param name="type">類別</param>
            <param name="baseType">參數數組,第一個參數就是指定類別</param>
            <returns>如果是指定類別,返回true,否則返回false.</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.FindInterface(System.Type,System.String)">
            <summary>
            類別是否實現了某個接口
            </summary>
            <param name="type">類別</param>
            <param name="interfaceTypeFullName">接口类型名称</param>
            <returns>如果是否實現了某個接口,返回true,否則返回false.</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.FindInterface(System.Type,System.Type)">
            <summary>
            類別是否實現了某個接口
            </summary>
            <param name="type">類別</param>
            <param name="interfaceType">接口类型</param>
            <returns>如果是否實現了某個接口,返回true,否則返回false.</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.IsDerivedFrom(System.Type,System.Type)">
            <summary>
            是否从父类继承
            </summary>
            <param name="testType">待测试类类型</param>
            <param name="parentType">父类</param>
            <returns>是否从父类继承</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.IsType``1(System.Type)">
            <summary>
            是否是指定類別
            </summary>
            <param name="type">類別</param>
            <typeparam name="T">指定類別</typeparam>
            <returns>如果是指定類別,返回true,否則返回false.</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.IsEnumerableOf(System.Type,System.Type)">
            <summary>
            是否枚举类型
            </summary>
            <param name="type">要判断的类型</param>
            <param name="elmentType">枚举元素类型</param>
            <returns>如果是某个指定元素类型的枚举类型返回true，否则返回false</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.IsDictionaryOf(System.Type,System.Type)">
            <summary>
            是否字典类型
            </summary>
            <param name="type">要判断的类型</param>
            <param name="elmentType">字典元素类型</param>
            <returns>如果是某个指定元素类型的字典类型返回true，否则返回false</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.IsSubClassOf(System.Type,System.Type)">
            <summary>
            是否是指定類別的子類
            </summary>
            <param name="type">類別</param>
            <param name="baseType">參數數組,第一個參數就是指定類別</param>
            <returns>如果是指定類別的子類,返回true,否則返回false.</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.IsSubClassOf``1(System.Type)">
            <summary>
            是否是指定類別的子類
            </summary>
            <param name="testType">類別</param>
            <typeparam name="T">指定類別</typeparam>
            <returns>如果是指定類別的子類,返回true,否則返回false.</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.FindInterface``1(System.Type)">
            <summary>
            類別是否實現了某個接口
            </summary>
            <param name="type">類別</param>
            <typeparam name="T">接口類別</typeparam>
            <returns>如果是否實現了某個接口,返回true,否則返回false.</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.AttributeInType(System.Type,System.Type)">
            <summary>
            類別是否擁有某個特性
            </summary>
            <param name="type">類別</param>
            <param name="attributeType">參數數組,第一個參數就是特性的類別</param>
            <returns>如果類別擁有某個特性,返回true,否則返回false.</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.AttributeInType``1(System.Type)">
            <summary>
            類別是否擁有某個特性
            </summary>
            <param name="type">類別</param>
            <typeparam name="T">指定特性類別</typeparam>
            <returns>如果類別擁有某個特性,返回true,否則返回false.</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetPropertyOrIndexValue``1(System.Object,System.String)">
            <summary>
            获取对象的属性(Propery)值或索引值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="myObject">对象</param>
            <param name="propertyName">属性(Propery)值</param>
            <returns>对象的制定的属性(Propery)的值</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            获取对象的属性(Propery)值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="myObject">对象</param>
            <param name="propertyName">属性(Propery)值</param>
            <returns>对象的制定的属性(Propery)的值</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.Field``1(System.Object,System.String)">
            <summary>
            获取对象的属性(Propery)值或索引值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="myObject">对象</param>
            <param name="propertyName">属性(Propery)值</param>
            <returns>对象的制定的属性(Propery)的值</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetPropertyOfFieldValue``1(System.Object,System.String)">
            <summary>
            获取对象的属性(Propery)值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="myObject">对象</param>
            <param name="propertyName">属性(Propery)值</param>
            <returns>对象的制定的属性(Propery)的值</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.FindTypes(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Predicate{System.Type})">
            <summary>
            查找类型
            </summary>
            <param name="assemblies">程序集列表</param>
            <param name="findMethod">查找条件</param>
            <returns>类型列表</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.FindTypes(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Predicate{System.Reflection.Assembly},System.Predicate{System.Type})">
            <summary>
            查找类别
            </summary>
            <param name="assemblies">程序集列表</param>
            <param name="assemblyFindMethod"></param>
            <param name="typeFindMethod"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.CheckBaseType``1(System.Type,System.String)">
            <summary>
            檢查類是否是某個類的子類
            </summary>
            <param name="testType">类型</param>
            <param name="errorMessage">异常消息</param>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.CheckBaseType``1(System.Type)">
            <summary>
            檢查類是否是某個類的子類
            </summary>
            <param name="testType">类型</param>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.CheckType``1(System.Object,System.String)">
            <summary>
            檢查對象是否為某個類別
            </summary>
            <param name="testObject">对象</param>
            <param name="errorMessage">异常消息</param>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.CheckType``1(System.Object)">
            <summary>
            檢查對象是否為某個類別
            </summary>
            <param name="testObject">对象</param>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.CheckTypeDerivedFrom(System.Type,System.Type)">
            <summary>
            检查是否从父类继承
            </summary>
            <param name="testType">待测试类类型</param>
            <param name="parentType">父类</param>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.FindAssemblyAttributes(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Predicate{System.Attribute})">
            <summary>
            查找程序集的特性
            </summary>
            <param name="assemblies">程序集列表</param>
            <param name="findMethod">查找条件</param>
            <returns>特性列表</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.FindAssemblyAttributes``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            查找程序集中某个类型的特性
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="assemblies">程序集列表</param>
            <returns>特性列表</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.HasAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            成员是否拥有某个特性
            </summary>
            <param name="memberInfo">成员信息</param>
            <param name="attributeType">特性类型</param>
            <param name="inherit">是否考虑继承</param>
            <returns>成员是否拥有某个特性</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            成员是否拥有某个特性
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="memberInfo">成员信息</param>
            <param name="inherit">是否考虑继承</param>
            <returns>成员是否拥有某个特性</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            获取某个类型的第一个特性
            </summary>
            <param name="memberInfo">成员信息</param>
            <param name="attributeType">特性类型</param>
            <param name="inherit">是否考虑继承</param>
            <returns>第一个特性</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            获取特性列表
            </summary>
            <param name="memberInfo">成员信息</param>
            <param name="attributeType">特性类型</param>
            <param name="inherit">是否考虑继承</param>
            <returns>特性列表</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取某个类型的第一个特性
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="memberInfo">成员信息</param>
            <param name="inherit">是否考虑继承</param>
            <returns>第一个特性</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取特性列表
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="memberInfo">成员信息</param>
            <param name="inherit">是否考虑继承</param>
            <returns>特性列表</returns>
        </member>
        <member name="M:JW.Base.Lang.ReflectionHelpler.GetAttribute``1(System.ComponentModel.AttributeCollection)">
            <summary>
            获取某个特性
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="attributes">特性列表</param>
            <returns>特性</returns>
        </member>
        <member name="T:JW.Base.Logger.LogHelper">
            <summary>  
            日志 
            </summary>   
        </member>
        <member name="F:JW.Base.Logger.LogHelper.logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="M:JW.Base.Logger.LogHelper.#cctor">
            <summary>
            构造函数：日志
            </summary>
        </member>
        <member name="M:JW.Base.Logger.LogHelper.Info(System.String,System.Exception)">
            <summary>
            普通日志
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:JW.Base.Logger.LogHelper.Warn(System.String,System.Exception)">
            <summary>
            告警日志
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:JW.Base.Logger.LogHelper.Error(System.String,System.Exception)">
            <summary>
            错误日志
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:JW.Base.Logger.LogHelper.InfoFormat(System.String,System.Object[])">
            <summary>
            格式化日志
            </summary>
            <param name="format"></param>
            <param name="objects"></param>
        </member>
        <member name="T:JW.Base.Security.SessionUser">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.Security.SessionUser.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:JW.Base.Security.SessionUser.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:JW.Base.Service.BackgroundService">
            <summary>
            后台服务
            </summary>
        </member>
        <member name="M:JW.Base.Service.BackgroundService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            服务执行
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Service.BackgroundService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            开启
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Service.BackgroundService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            停止
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Service.BackgroundService.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:JW.Base.Xml.XmlHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:JW.Base.Xml.XmlHelper.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:JW.Base.Xml.XmlHelper.SerializeObject``1(``0)">
            <summary>
                XML序列化
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Xml.XmlHelper.SerializeObjectWithoutNamespace``1(``0)">
            <summary>
                序列化XML不带命名空间和定义
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Xml.XmlHelper.DeserializeObject``1(System.IO.Stream)">
            <summary>
                反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:JW.Base.Xml.XmlHelper.DeserializeObject``1(System.String)">
            <summary>
                反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
    </members>
</doc>
